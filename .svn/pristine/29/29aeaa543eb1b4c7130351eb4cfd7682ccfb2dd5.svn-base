package com.example.locationbased;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;

public class LocationEnterActivity extends MapActivity {
	private static final int TWO_MINUTES = 1000 * 60 * 2;

	static final String TAG = "locationbasedactivity";

	AsyncTask<String, String, String> GetLocationDetails; // first async task to
															// do geocoding and
															// get loc. details
	// AsyncTask<String, String, String> QueryServer; //2nd async task to submit
	// details to server and query server for nearby people
	// has to be performed after execution of 1st async task
	SharedPreferences prefs;
	String emailId;
	String password;
	double sourceLongitude;
	double sourceLatitude;
	double destinationLatitude;
	double destinationLongitude;
	double currentLatitude;
	double currentLongitude;
	StringBuilder currentAddress; // address in text of source
	StringBuilder destinationAddress = new StringBuilder();// address in text of
															// source
	StringBuilder sourceAddress = new StringBuilder();
	Button buttonLogout;
	Button buttonSubmit; // Button to submit info
	Button buttonCurrentLocation;// button to populate sourceField with
									// currentAddress
	EditText destinationField; // Edit field of destination
	EditText sourceField; // Edit field of source
	LocationManager locationManager;
	LocationListener locationListener;
	static Location currentBestLocation = null;// <2>
	Geocoder geocoder; // Geocoder used in Reverse Geocoding..ie from address to
						// lat/long
	TextView locationText; // shows current location ...set by location listener
	MapView map;
	MapController mapController;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		prefs = PreferenceManager
				.getDefaultSharedPreferences(getApplicationContext());
		if (!prefs.getBoolean("loggedin", false)) {
			Intent intent = new Intent(LocationEnterActivity.this,
					FirstActivity.class);
			startActivity(intent);
			finish();
		}

		setContentView(R.layout.activity_location);

		Log.d(TAG, "On created LocationEnterActivity");
		prefs = PreferenceManager
				.getDefaultSharedPreferences(getApplicationContext());
		emailId = prefs.getString("emailId", null);
		password = prefs.getString("password", null);
		locationText = (TextView) findViewById(R.id.text1);
		destinationField = (EditText) findViewById(R.id.destinationField);
		sourceField = (EditText) findViewById(R.id.sourceField);
		buttonCurrentLocation = (Button) findViewById(R.id.buttonCurrentLocation);
		buttonSubmit = (Button) findViewById(R.id.buttonSubmit);
		buttonLogout = (Button) findViewById(R.id.buttonLogout);
		map = (MapView) findViewById(R.id.map1);
		map.setBuiltInZoomControls(true);
		mapController = map.getController(); // <4>
		mapController.setZoom(16);
		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		locationListener = new LocationListener() {
			@Override
			public void onStatusChanged(String provider, int status,
					Bundle extras) {
			}

			@Override
			public void onProviderEnabled(String provider) {

				Log.d(TAG, "OnProvider Enabled");
			}

			@Override
			public void onProviderDisabled(String provider) {

				Log.d(TAG, "OnProvider Disabled");
			}

			@Override
			public void onLocationChanged(Location location) {
				Log.d(TAG, "onLocationChanged");
				makeUseOfNewLocation(location);

			}

			private void makeUseOfNewLocation(Location location) {

				Log.d(TAG,
						"onLocationChanged with location "
								+ location.toString());
				if (isBetterLocation(location,
						LocationEnterActivity.currentBestLocation)) {
					LocationEnterActivity.currentBestLocation = location;
					showOnMap(location);
					getAndSetAddressFromLocation(location);

				}

			}

			private void getAndSetAddressFromLocation(Location location) {
				geocoder = new Geocoder(getApplicationContext());
				currentLatitude = location.getLatitude();
				currentLongitude = location.getLongitude();
				List<Address> addresses;
				try {
					addresses = geocoder.getFromLocation(
							location.getLatitude(), location.getLongitude(), 5);

					currentAddress = new StringBuilder("");
					if (addresses.size() > 0) {

						Address address = addresses.get(0);
						currentAddress.setLength(0);
						for (int i = 0; i <= address.getMaxAddressLineIndex(); i++) {
							currentAddress.append(address.getAddressLine(i))
									.append(" \n");

						}
					}
					locationText.setText(currentAddress); // set current address
															// in a textview
					Log.d(TAG, currentAddress.toString());

				} catch (IOException e) {
					// TODO Auto-generated catch block
					Log.d(TAG, "couldnt get addreses from geocoder");
					e.printStackTrace();
				}
			}

			private void showOnMap(Location location) {
				int latitude = (int) (location.getLatitude() * 1000000);
				int longitude = (int) (location.getLongitude() * 1000000);
				GeoPoint point = new GeoPoint(latitude, longitude);
				mapController.animateTo(point);

			}

		};

		buttonLogout.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Editor editor = prefs.edit();
				editor.clear();
				editor.commit();
				Intent intent = new Intent(LocationEnterActivity.this,
						FirstActivity.class);
				intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK
						| Intent.FLAG_ACTIVITY_NEW_TASK);
				startActivity(intent);

			}
		});

		buttonCurrentLocation.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				sourceField.setText(currentAddress);
			}
		});

		buttonSubmit.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {

				// TODO Auto-generated method stub
				String destination = destinationField.getText().toString();
				String source = sourceField.getText().toString();
				if (source.equalsIgnoreCase(currentAddress.toString())) {
					// do nothing..have to send current location itself as
					// source location to server
					Log.d(TAG, "Your source is same as current address");
					source = null;
				}

				GetLocationDetails = new ForwardGeocoding().execute(
						destination, source); // get address and coordinates by
												// geocoding

			}

			class QueryServer extends AsyncTask<String, String, String> {

				@Override
				protected String doInBackground(String... params) {
					Log.d(TAG, "Starting QueryServer");
					HttpClient httpClient = new DefaultHttpClient();
					HttpPost httpPost = new HttpPost(
							"http://www.sharearide.net63.net/controller.php");
					List<NameValuePair> values = new ArrayList<NameValuePair>();

					values.add(new BasicNameValuePair("email_id", emailId));
					values.add(new BasicNameValuePair("password", password));
					values.add(new BasicNameValuePair("source_latitude", Double
							.toString(sourceLatitude)));
					values.add(new BasicNameValuePair("source_longitude",
							Double.toString(sourceLongitude)));
					values.add(new BasicNameValuePair("destination_latitude",
							Double.toString(destinationLatitude)));
					values.add(new BasicNameValuePair("destination_longitude",
							Double.toString(destinationLongitude)));
					values.add(new BasicNameValuePair("source_address",
							sourceAddress.toString()));
					values.add(new BasicNameValuePair("destination_address",
							destinationAddress.toString()));
					values.add(new BasicNameValuePair("mode_of_rider", "e"));
					values.add(new BasicNameValuePair("action",
							"updatelocation"));
					HttpResponse httpResponse = null;
					String response = null;
					try {
						httpPost.setEntity(new UrlEncodedFormEntity(values));
						Log.d(TAG, "going to post params");
						httpResponse = httpClient.execute(httpPost);
						HttpEntity entity = httpResponse.getEntity();
						InputStream is = entity.getContent();
						response = convertStreamToString(is);
						if (response != null)
							Log.d(TAG, response);
					} catch (UnsupportedEncodingException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (ClientProtocolException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalStateException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					return response;
				}

				@Override
				protected void onPostExecute(String result) {
					// TODO Auto-generated method stub
					super.onPostExecute(result);
					Intent intent =new Intent(LocationEnterActivity.this,ShowCoPassengers.class);
					intent.putExtra("copassenger_results_string", result);
					startActivity(intent);
	
					
					/*try {
				
					JSONObject jsonObject =new JSONObject(result);
					JSONArray  usersArray = jsonObject.getJSONArray("users");
					for (int i = 0; i < usersArray.length(); i++) {
				        JSONObject jsonObject1 = usersArray.getJSONObject(i);
				        Log.d(TAG, jsonObject1.getString("email_id"));
					} 
					 	 

				     
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/
					//Toast.makeText(LocationEnterActivity.this, result,
						//	Toast.LENGTH_LONG).show();
				}

			}

			class ForwardGeocoding extends AsyncTask<String, String, String> {

				@Override
				protected String doInBackground(String... params) {

					// double destinationLatitude,
					// destinationLongitude,sourceLatitude,sourceLongitude;
					Geocoder geocoder1 = new Geocoder(getApplicationContext());
					List<Address> addresses = new ArrayList<Address>(1);
					try {
						addresses = geocoder1.getFromLocationName(params[0], 1);
						addresses.get(0);
						destinationLatitude = addresses.get(0).getLatitude();
						destinationLongitude = addresses.get(0).getLongitude();
						destinationAddress.setLength(0);
						for (int i = 0; i <= addresses.get(0)
								.getMaxAddressLineIndex(); i++) {

							destinationAddress.append(
									addresses.get(0).getAddressLine(i)).append(
									" \n");

						}
						if (params[1] != null) {

							addresses = geocoder1.getFromLocationName(
									params[1], 1);
							addresses.get(0);
							sourceLatitude = addresses.get(0).getLatitude();
							sourceLongitude = addresses.get(0).getLongitude();
							sourceAddress.setLength(0);
							for (int i = 0; i <= addresses.get(0)
									.getMaxAddressLineIndex(); i++) {

								sourceAddress.append(
										addresses.get(0).getAddressLine(i))
										.append(" \n");

							}

							Log.d(TAG,
									"Source Latitude is "
											+ Double.toString(sourceLatitude));
							Log.d(TAG,
									" Source Longitude is "
											+ Double.toString(sourceLongitude));

						} else {
							sourceLatitude = currentLatitude;
							sourceLongitude = currentLongitude;

							sourceAddress.setLength(0);
							sourceAddress.append(currentAddress.toString());

						}

						Log.d(TAG,
								"Destination Latitude is "
										+ Double.toString(destinationLatitude));
						Log.d(TAG,
								" Destination Longitude is "
										+ Double.toString(destinationLongitude));
						Log.d(TAG,
								"source Latitude is "
										+ Double.toString(sourceLatitude));

					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						Log.d(TAG, "IO excepton.....");

					}

					return null;
				}

				@Override
				protected void onPostExecute(String result) {
					// TODO Auto-generated method stub
					super.onPostExecute(result);
					new QueryServer().execute();
				}

			}

		});

	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		Log.d(TAG, "OnResume LocationEnterActivity");
		locationManager.requestLocationUpdates(
				LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,
				1000, 10, locationListener);

	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		Log.d(TAG, "onPause  LocationEnterActivity");
		locationManager.removeUpdates(locationListener);

	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
		Log.d(TAG, "On Stopped LocationEnterActivity");
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}

	protected boolean isBetterLocation(Location location,
			Location currentBestLocation) {
		if (currentBestLocation == null) {
			// A new location is always better than no location
			return true;
		}

		// Check whether the new location fix is newer or older
		long timeDelta = location.getTime() - currentBestLocation.getTime();
		boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;
		boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;
		boolean isNewer = timeDelta > 0;

		// If it's been more than two minutes since the current location, use
		// the new location
		// because the user has likely moved
		if (isSignificantlyNewer) {
			return true;
			// If the new location is more than two minutes older, it must be
			// worse
		} else if (isSignificantlyOlder) {
			return false;
		}

		// Check whether the new location fix is more or less accurate
		int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation
				.getAccuracy());
		boolean isLessAccurate = accuracyDelta > 0;
		boolean isMoreAccurate = accuracyDelta < 0;
		boolean isSignificantlyLessAccurate = accuracyDelta > 200;

		// Check if the old and new location are from the same provider
		boolean isFromSameProvider = isSameProvider(location.getProvider(),
				currentBestLocation.getProvider());

		// Determine location quality using a combination of timeliness and
		// accuracy
		if (isMoreAccurate) {
			return true;
		} else if (isNewer && !isLessAccurate) {
			return true;
		} else if (isNewer && !isSignificantlyLessAccurate
				&& isFromSameProvider) {
			return true;
		}
		return false;
	}

	/** Checks whether two providers are the same */
	private boolean isSameProvider(String provider1, String provider2) {
		if (provider1 == null) {
			return provider2 == null;
		}
		return provider1.equals(provider2);
	}

	

	private static String convertStreamToString(InputStream is) {

		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		StringBuilder sb = new StringBuilder();

		String line = null;
		try {
			while ((line = reader.readLine()) != null) {
				sb.append((line + "\n"));
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return sb.toString();
	}

}
